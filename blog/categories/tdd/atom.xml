<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Albert Agram]]></title>
  <link href="http://alagram.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://alagram.github.io/"/>
  <updated>2014-10-13T13:19:12+00:00</updated>
  <id>http://alagram.github.io/</id>
  <author>
    <name><![CDATA[Albert Agram]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Test using TDD with Rspec]]></title>
    <link href="http://alagram.github.io/blog/2014/09/05/simple-test-using-tdd-with-rspec/"/>
    <updated>2014-09-05T19:12:00+00:00</updated>
    <id>http://alagram.github.io/blog/2014/09/05/simple-test-using-tdd-with-rspec</id>
    <content type="html"><![CDATA[<!-- more -->

<h2 id="introduction">Introduction</h2>

<p>Test Driven Development is great for driving out implementation of features in software development. In this post, I&#39;m going to go through how I write tests using the TDD approach with <a href="https://github.com/rspec/rspec-rails">Rspec</a> by going through the steps to drive out the implementation of simple search feature. We&#39;ll implement a method named <code>search_by_title</code>.</p>

<h2 id="how-i-write-tests">How I Write Tests</h2>

<p>1) I start by thinking about all the test cases I want to cover. That is, thinking on a high level on what the functionality should achieve. This allows me to have more complete coverage of what I want my code to accomplish instead of diving straight into one test, making it pass and then figuring out what the next test should be.</p>

<p>2) Setup data for tests, perform action and put an assertion on the result of the action.</p>

<p>3) Run test and let it fail.</p>

<p>4) Finally, take small steps to make the test pass. This is because in TDD you want to write the simplest code to make a test pass and also make sure that every piece of code you write is going to be the result of a failing test.</p>

<h3 id="the-code">The code</h3>

<p>By following step 1, I write out all the test cases I want to cover:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&quot;rails_helper&quot;</span>

<span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">Video</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:model</span> <span class="k">do</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">belong_to</span> <span class="ss">:category</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:title</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:description</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s2">&quot;search_by_title&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;returns an empty array if there is no match&quot;</span>
    <span class="n">it</span> <span class="s2">&quot;returns an array of one video for an exact match&quot;</span>
    <span class="n">it</span> <span class="s2">&quot;returns an array of one video for a partial match&quot;</span>
    <span class="n">it</span> <span class="s2">&quot;returns an array of all matches ordered by created_at&quot;</span>
    <span class="n">it</span> <span class="s2">&quot;returns an empty array for a search with an empty string&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>The video model in <code>app/models/video.rb</code> looks like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Video</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:category</span>
  <span class="n">validates_presence_of</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:description</span>
<span class="k">end</span>
</code></pre></div>
<p>Next, I&#39;ll set up the data I need for the first test, perform an action and make an assertion on the result; step 2. The code for the first test looks like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">it</span> <span class="s2">&quot;returns an empty array if there is no match&quot;</span> <span class="k">do</span>
  <span class="n">futurama</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Futurama&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Space Travel!&quot;</span><span class="p">)</span>
  <span class="n">back_to_future</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Back to Future&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Time Travel&quot;</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Now I&#39;ll run the test and let it fail; step 3:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">rspec spec/models/video_spec.rb
</code></pre></div>
<p><img src="/images/2014-09-05-simle-test-using-tdd-with-rspec/spec_1.png" title="Spec 1" ></p>

<p>Test is complaining about <code>NoMethodError: undefined method search_by_title for #&lt;Class:0x007f9ec0ad0d98&gt;</code></p>

<p>Next, make that little change in <code>app/models/video.rb</code>; step 4:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Video</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:category</span>

  <span class="n">validates_presence_of</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:description</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search_by_title</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Run test again:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">rspec spec/models/video_spec.rb
</code></pre></div>
<p><img src="/images/2014-09-05-simle-test-using-tdd-with-rspec/spec_2.png" title="Spec 2" ></p>

<p>This time the failure is <code>ArgumentError: wrong number of arguments (1 for 0)</code>. In our test, we pass a parameter to the method and have to replicate that in the real code.</p>

<p>Let&#39;s make that change:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Video</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>

  <span class="o">.</span><span class="n">.</span><span class="o">.</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search_by_title</span><span class="p">(</span><span class="n">search_term</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Run the test again:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">rspec spec/models/video_spec.rb
</code></pre></div>
<p><img src="/images/2014-09-05-simle-test-using-tdd-with-rspec/spec_3.png" title="Spec 3" ></p>

<p>There is another error:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">expected: <span class="o">[]</span>
got: nil
</code></pre></div>
<p>The easiest change to make the test pass is to return an empty array in the <code>search_by_title</code> method:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Video</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>

  <span class="o">.</span><span class="n">.</span><span class="o">.</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search_by_title</span><span class="p">(</span><span class="n">search_term</span><span class="p">)</span>
    <span class="o">[]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>At this point, if all all method does is to return an empty array this is all we need to satisfy that.</p>

<p>Now when we run the test again, we&#39;ll have a passing test:</p>

<p><img src="/images/2014-09-05-simle-test-using-tdd-with-rspec/spec_4.png" title="Spec 4" ></p>

<p>Fortunately, we have other test cases that we do want to satisfy and by following this simple process for each test, we&#39;re forced to drive-out the actually implementation of the method:</p>

<p>Our final code in <code>app/models/video.rb</code> will look like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Video</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:category</span>

  <span class="n">validates_presence_of</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:description</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search_by_title</span><span class="p">(</span><span class="n">search_term</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">[]</span> <span class="k">if</span> <span class="n">search_term</span><span class="o">.</span><span class="n">blank?</span>
    <span class="n">where</span><span class="p">(</span><span class="s2">&quot;title LIKE ?&quot;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">search_term</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>And our test code will be:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&quot;rails_helper&quot;</span>

<span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="no">Video</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:model</span> <span class="k">do</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">belong_to</span> <span class="ss">:category</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:title</span> <span class="p">}</span>
  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:description</span> <span class="p">}</span>

  <span class="n">describe</span> <span class="s2">&quot;search_by_title&quot;</span> <span class="k">do</span>
    <span class="n">it</span> <span class="s2">&quot;returns an empty array if there is no match&quot;</span> <span class="k">do</span>
      <span class="n">futurama</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Futurama&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Space Travel!&quot;</span><span class="p">)</span>
      <span class="n">back_to_future</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Back to Future&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Time Travel&quot;</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;returns an array of one video for an exact match&quot;</span> <span class="k">do</span>
      <span class="n">futurama</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Futurama&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Space Travel!&quot;</span><span class="p">)</span>
      <span class="n">back_to_future</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Back to Future&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Time Travel&quot;</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s2">&quot;Futurama&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[</span><span class="n">futurama</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;returns an array of one video for a partial match&quot;</span> <span class="k">do</span>
      <span class="n">futurama</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Futurama&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Space Travel!&quot;</span><span class="p">)</span>
      <span class="n">back_to_future</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Back to Future&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Time Travel&quot;</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s2">&quot;urama&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[</span><span class="n">futurama</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;returns an array of all matches ordered by created_at&quot;</span> <span class="k">do</span>
      <span class="n">futurama</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Futurama&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Space Travel!&quot;</span><span class="p">,</span> <span class="ss">created_at</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
      <span class="n">back_to_future</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Back to Future&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Time Travel&quot;</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s2">&quot;Futur&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[</span><span class="n">back_to_future</span><span class="p">,</span> <span class="n">futurama</span><span class="o">]</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="s2">&quot;returns an empty array for a search with an empty string&quot;</span> <span class="k">do</span>
      <span class="n">futurama</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Futurama&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Space Travel!&quot;</span><span class="p">,</span> <span class="ss">created_at</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
      <span class="n">back_to_future</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Back to Future&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Time Travel&quot;</span><span class="p">)</span>
      <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>And all our tests pass:</p>

<p><img src="/images/2014-09-05-simle-test-using-tdd-with-rspec/spec_pass.png" title="Spec Pass" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Types of Testing and shoulda-matchers]]></title>
    <link href="http://alagram.github.io/blog/2014/08/31/types-of-testing-and-shoulda-matchers/"/>
    <updated>2014-08-31T11:11:00+00:00</updated>
    <id>http://alagram.github.io/blog/2014/08/31/types-of-testing-and-shoulda-matchers</id>
    <content type="html"><![CDATA[<!-- more -->

<h2 id="introduction">Introduction</h2>

<p>When developing software, how do you know something works? Its certain that all software have bugs and the only way to make sure the code you&#39;ve written is bug-free is by designing test cases to test against your codebase. It is the most objective way to say confidently that a feature works and things did not break. This post looks at types of testing and how to use <a href="https://github.com/thoughtbot/shoulda-matchers">shoulda-matchers</a> to test common Rails functionality.</p>

<h3 id="types-of-testing">Types of testing</h3>

<p>1) <em><strong>Unit Tests</strong></em>: Unit tests involve testing different components in isolation. You&#39;ll typically focus on one block at a time and make sure all cases are covered. In the Rails context, unit testing includes tests for models, views, helpers and routes in isolation. In sum, you&#39;re focusing on one thing at a time. Unit tests are the fastest in terms of speed and offer the best coverage.</p>

<p>2) <em><strong>Functional Tests</strong></em>: Functional tests involve testing multiple components together. This is another way of making sure different parts of a system work in tandem. In the Rails context, functional testing includes controller tests. Typically the controller is where you pull multiple models and make them work with eachother to generate data before passing them over to the views. You&#39;ll also be testing request and response cycles.</p>

<p>3) <em><strong>Integration Tests</strong></em>: This involves following a business process to make sure that not only do components work together, but can also work together to achieve a business objective. Integration testing involves mimicking the end-user by driving through the browser. You can login, fill a form, submit forms, click links and buttons etc. Integration tests are more realistic because you&#39;re following what a user of your system would do.</p>

<h3 id="shoulda-matcher">shoulda-matcher</h3>

<p>In Test Driven Development (TDD) you&#39;ll typically want to test your own code. <a href="https://github.com/thoughtbot/shoulda-matchers">shoulda-matchers</a> is a library that simplifies testing common Rails functionality like associations and validations. Suppose we have a <code>video</code> model with the following code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># video.rb</span>
<span class="k">class</span> <span class="nc">Video</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:category</span>

  <span class="n">validates_presence_of</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:description</span>
<span class="k">end</span>
</code></pre></div>
<p>using <code>shoulda-matchers</code> we can write a few lines of code to test the functionality of our code:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">belong_to</span> <span class="ss">:category</span> <span class="p">}</span>
<span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:title</span> <span class="p">}</span>
<span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:description</span> <span class="p">}</span>
</code></pre></div>
<p>These simple lines can take the place of all the following tests:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">it</span> <span class="s2">&quot;belongs to a category&quot;</span> <span class="k">do</span>
  <span class="n">cat</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Action&quot;</span><span class="p">)</span>
  <span class="n">vid</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Yet another fake video&quot;</span><span class="p">,</span> <span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;Not sure...&quot;</span><span class="p">,</span> <span class="ss">category</span><span class="p">:</span> <span class="n">cat</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="n">vid</span><span class="o">.</span><span class="n">category</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">cat</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">it</span> <span class="s2">&quot;does not save video without a title&quot;</span> <span class="k">do</span>
  <span class="n">video</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">description</span><span class="p">:</span> <span class="s2">&quot;I like this movie&quot;</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">it</span> <span class="s2">&quot;does not save a video without a description&quot;</span> <span class="k">do</span>
  <span class="n">video</span> <span class="o">=</span> <span class="no">Video</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Robocop&quot;</span><span class="p">)</span>
  <span class="n">expect</span><span class="p">(</span><span class="no">Video</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>]]></content>
  </entry>
  
</feed>
