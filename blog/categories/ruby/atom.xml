<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Albert Agram]]></title>
  <link href="http://alagram.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://alagram.github.io/"/>
  <updated>2014-10-13T13:21:31+00:00</updated>
  <id>http://alagram.github.io/</id>
  <author>
    <name><![CDATA[Albert Agram]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Evaluating Reverse Polish Notation using a Stack in Ruby]]></title>
    <link href="http://alagram.github.io/blog/2014/10/12/evaluating-reverse-polish-notation-using-a-stack-in-ruby/"/>
    <updated>2014-10-12T10:45:18+00:00</updated>
    <id>http://alagram.github.io/blog/2014/10/12/evaluating-reverse-polish-notation-using-a-stack-in-ruby</id>
    <content type="html"><![CDATA[<!-- more -->

<h2 id="introduction">Introduction</h2>

<p>Let&#39;s say you want to add two numbers <code>4</code> and <code>9</code>, you&#39;ll have three ways to go about it:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">+ 4 9  # Prefix notation or Polish Notation
4 + 9  # Infix notation
4 9 +  # Postfix notation or Reverse Polish Notation
</code></pre></div>
<p>First we have the <code>Prefix notation</code> or <code>Polish notation</code>, <code>Infix notation</code> and <code>Postfix notation</code> or <code>Reverse Polish Notation</code>. What we&#39;re used to is the <em>infix notation</em>. Further when you write expressions like:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">7 + 5
7 + 4 * 2
4 * 7 + 3 * 8 + 16
</code></pre></div>
<p>we&#39;ve been trained to look at <em>infix notation</em> and instantly know how to do the calculation. Simple expressions like the first can be straight forward, however things become ambiguous when the expression becomes complex like we have in the second and third examples. We&#39;ll have to use parenthesis everywhere and take note of order of operation when evaluating such expressions. By order of operation, I mean we know to do multiplication before addition etc. In the end you&#39;d have to simplify the second expression to become:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">((7 + 4) * 2)
</code></pre></div>
<p>and the third to look like:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">(4 * (((7 + 3) * 8) + 16))
</code></pre></div>
<p>before easy simplification can take place. In other words, when more operators are combined doing the calculation is not always straightforward.</p>

<p>Believe it or not, even though they might look unusual at first, Prefix Notation (<a href="http://en.wikipedia.org/wiki/Polish_notation">Polish Notation</a>) and Postfix Notation (<a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">Reverse Polish Notation</a>) offer advantages that let us perform such calculations with ease.</p>

<h3 id="advantages-of-prefix-and-postfix-notation">Advantages of Prefix and Postfix notation</h3>

<ol>
<li>You don&#39;t need the idea of &quot;order of operation&quot;.</li>
<li>You never need parentheses.</li>
</ol>

<p>Let&#39;s see it in action by transforming the expression <code>4 * (((7 + 3) * 8) + 16)</code> to prefix and postfix notation:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># Prefix
* 4 + * + 7 3 8 16
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text"># Postfix
4 7 3 + 8 * 16 + *
</code></pre></div>
<h3 id="evaluating-postfix/reverse-polish-notation-(rpn)-expressions">Evaluating Postfix/Reverse Polish Notation (RPN) Expressions</h3>

<p>The reason RPN is easier is, the operators are right next to the operands they&#39;re operating on. In other words, the first operator you see is the first operator you apply. Whereas in infix notation the operator you apply can be arbitrarily far into the expression. Let&#39;s use the expression <code>4 7 3 + 8 * 16 + *</code> to illustrate. RPN is evaluated by reading the expression from left to right and performing the operation as soon as you see it.  Reading from left to right, the first operator we see is <code>+</code>. Since addition is a <a href="http://en.wikipedia.org/wiki/Binary_operation">binary operation</a> the <code>+</code> will take effect on the last two numbers <code>7</code> and <code>3</code>. After evaluation <code>7 + 3</code> the result of that is placed into the original expression and is transformed into:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">4 10 8 * 16 + *
</code></pre></div>
<p>The next operation we see is <code>*</code> which is also a binary operation. <code>10 * 8</code> is evaluated and the expression is transformed into:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">4 80 16 + *
</code></pre></div>
<p>Next, we see the <code>+</code> operator and we perform <code>80 + 16</code> which turns the expression into:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">4 96 *
</code></pre></div>
<p>Finally, we see <code>*</code> another binary operation. The final evaluation becomes:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">4 * 96
</code></pre></div>
<p>which gives us <code>384</code>.</p>

<p>The algorithm for parsing RPN expressions is called the <a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">Shunting-yard algorithm</a> and is implemented using a stack. We dive into that next and implement a stack class in Ruby.</p>

<h3 id="stack">Stack</h3>

<p>A <a href="http://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29">stack</a> is an <a href="http://en.wikipedia.org/wiki/Abstract_data_type">abstract data type</a> that is common and is used all over. An example of a stack is a stack of plates on a table. Say you have 4 plates on top of each other on a table, the only way to add a plate to the stack is by adding it to the top. Also, the only way to get a plate off the stack is by taking it from the top. Hence, it adhere&#39;s to the <strong>last in, first out</strong> or <a href="http://en.wikipedia.org/wiki/LIFO_%28computing%29">LIFO</a> pattern. You can think of an abstract data type as a collection of data and a set of operations on it with specifications on how those operations behave. A stack is an abstract data type because an implementation that satisfies those operations is an accepted implementation. A stack has a few operations namely:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"> push(item)    -&gt; place new item on stack
 pop           -&gt; remove most recent item added to stack
 peek          -&gt; return most recent item added to the stack (don&#39;t remove)
 empty?        -&gt; returns true if nothing on stack, returns false otherwise
</code></pre></div>
<p>With <a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">Shunting-yard algorithm</a> in mind, let&#39;s create a Stack class in Ruby:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Stack</span>
  <span class="k">class</span> <span class="nc">UnderFlowError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span><span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@stack</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">empty?</span>
    <span class="vi">@stack</span><span class="o">.</span><span class="n">empty?</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
    <span class="vi">@stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">pop</span>
    <span class="k">raise</span> <span class="no">UnderFlowError</span><span class="p">,</span> <span class="s2">&quot;Stack is empty&quot;</span> <span class="k">if</span> <span class="n">empty?</span>
    <span class="vi">@stack</span><span class="o">.</span><span class="n">pop</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">peek</span>
    <span class="vi">@stack</span><span class="o">.</span><span class="n">last</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Note we&#39;re raising an error just in case an empty stack is being popped.</p>

<p>Next, lets create a class to handle RPN expression evaluation with addition, multiplication and subtraction operators:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># rpn_expression.rb</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="o">.</span>
<span class="c1"># Stack class omitted for brevity</span>

<span class="k">class</span> <span class="nc">RPNExpression</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
    <span class="vi">@expr</span> <span class="o">=</span> <span class="n">expr</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">evaluate</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="no">Stack</span><span class="o">.</span><span class="n">new</span>

    <span class="n">tokens</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">token</span><span class="o">|</span>
      <span class="k">if</span> <span class="n">numeric?</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
        <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">token</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s2">&quot;+&quot;</span>
        <span class="n">rhs</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span>
        <span class="n">lhs</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span>
        <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">lhs</span> <span class="o">+</span> <span class="n">rhs</span><span class="p">)</span>
      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s2">&quot;*&quot;</span>
        <span class="n">rhs</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span>
        <span class="n">lhs</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span>
        <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">lhs</span> <span class="o">*</span> <span class="n">rhs</span><span class="p">)</span>
      <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s2">&quot;-&quot;</span>
        <span class="n">rhs</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span>
        <span class="n">lhs</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span>
        <span class="n">stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">lhs</span> <span class="o">-</span> <span class="n">rhs</span><span class="p">)</span>
      <span class="k">else</span>
        <span class="k">raise</span> <span class="s2">&quot;whaaaat I don&#39;t know this token?&quot;</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">stack</span><span class="o">.</span><span class="n">pop</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">tokens</span>
    <span class="vi">@expr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">numeric?</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    <span class="n">token</span> <span class="o">=~</span> <span class="sr">/^-?\d\+$/</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>We&#39;re doing a few things here. <code>tokens</code> helps us split the expression into tokens based on spaces and <code>numeric?</code> helps us determine if the token is a number or not. The <code>evaluate</code> method is where everything happens. In <code>evaluate</code> we&#39;re iterating through the tokens and checking if it&#39;s a number or an operator. If it&#39;s a number, it&#39;s pushed onto the stack. If it&#39;s not a number, it&#39;s an operator, in which case the topmost token is popped from the stack and named <code>rhs</code>. The next token is also popped and named <code>lsh</code>. These tokens become operands and the operation is performed. After this the result is pushed back onto the stack. After all the tokens are check and all operations performed, the last item in the stack is popped to give us the final evaluated value.</p>

<p>Example:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">RPNExpression</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;4 7 3 + 8 * 16 + *&quot;</span><span class="p">)</span>

<span class="o">=&gt;</span> <span class="mi">384</span>
</code></pre></div>
<p>Try it. There are other ways of simplifying the <code>RPNExpression</code> class and I&#39;ll leave that up to the reader.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Class Act]]></title>
    <link href="http://alagram.github.io/blog/2013/05/24/lets-get-classy/"/>
    <updated>2013-05-24T16:31:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/05/24/lets-get-classy</id>
    <content type="html"><![CDATA[<!-- more -->

<p>We can create an empty class in Ruby by using the following syntax:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;the-above-class-can-also-be-written-in-one-line-like-so:&quot;&gt;The above class can also be written in one line like so:&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Animal</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Next, lets initialize our class with the <code>initialize</code> method like so:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Our Animal class can now hold vairables, in the form of instance variables and class vairables. Instance variables always start with <code>@</code> while class varaibles start with <code>@@</code>. We have to make sure every Animal we create has a name by giving it <code>@name</code> instance varaible. This way only the Animal class and instances of that class will have access to <code>@name</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now we can create an instance of our Animal class by calling the <code>new</code> method on <code>Animal</code> class and passing an argument.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="no">Animal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">bruno</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Class variables are attached to the entire class, not just an instance of the class. For instance we can set up a simple BankAccount class and use class variables to track how many instance of the class have been created like so:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BankAccount</span>
</span><span class='line'>  <span class="vc">@@total_accounts</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def initialize</span>
</span><span class='line'><span class="sr">    @@total_accounts += 1</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">accounts_created</span>
</span><span class='line'>    <span class="vc">@@total_accounts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;savings = BankAccount.new</span>
</span><span class='line'><span class="sr">current = BankAccount.new</span>
</span><span class='line'><span class="sr">inv = BankAccount.new&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="no">Number</span> <span class="n">of</span> <span class="n">accounts</span> <span class="n">created</span> <span class="n">is</span> <span class="c1">#{BankAccount.accounts_created}.&amp;quot; &lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;=&amp;gt;-number-of-accounts-created-is-3.&quot;</span><span class="o">&gt;=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">Number</span> <span class="n">of</span> <span class="n">accounts</span> <span class="n">created</span> <span class="n">is</span> <span class="mi">3</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So now everytime a new instance of BankAcoount is created <code>@@total_accounts</code> is increamented by one. Simple right?</p>

<p>The above illustration also subtly introduced the concept of Class mehtods. These usually start with <code>self</code>. In the context of the class <code>self</code> referes to the current class, hence they can be called directed without creating an instance of a class. </p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">title</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="no">The</span> <span class="n">title</span> <span class="n">of</span> <span class="n">this</span> <span class="n">book</span> <span class="n">is</span> <span class="o">&amp;</span><span class="c1">#39;Outliers&amp;#39;.&amp;quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Book.title&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;=&amp;gt;-the-title-of-this-book-is-&amp;#39;outliers&amp;#39;.&quot;</span><span class="o">&gt;=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">The</span> <span class="n">title</span> <span class="n">of</span> <span class="n">this</span> <span class="n">book</span> <span class="n">is</span> <span class="o">&amp;</span><span class="c1">#39;Outliers&amp;#39;.&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Instance methods, on the other hand, can only be called by creating an instance of the class.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Author</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def info</span>
</span><span class='line'><span class="sr">    puts &amp;quot;The book has X number of pages and the author is </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="sr">.&amp;quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">audiobook</span> <span class="o">=</span> <span class="no">Author</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="no">Malcolm</span> <span class="no">Gladwell</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;)</span>
</span><span class='line'><span class="n">audiobook</span><span class="o">.</span><span class="n">info</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1 id=&quot;=&amp;gt;-the-book-has-x-number-of-pages-and-the-author-is-malcolm-gladwell.&quot;&gt;=&amp;gt; The book has X number of pages and the author is Malcolm Gladwell.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>def</code> keyword creates an instance method. Hence the only way <code>info</code> method can be called is by creating an instance of <code>Author</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting familiar with Ruby Arrays and Hash Methods.]]></title>
    <link href="http://alagram.github.io/blog/2013/05/17/getting-familiar-with-ruby-arrays-and-hashes/"/>
    <updated>2013-05-17T14:37:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/05/17/getting-familiar-with-ruby-arrays-and-hashes</id>
    <content type="html"><![CDATA[<!-- more -->

<p>This post is about getting familiar with array and hash methods. Understanding arrays and hashes are very core concepts of Ruby and other frameworks like Rails.</p>

<p>Now lets have some fun with some examples of Array and Hash mehtods.</p>

<p>Given the following array <code>my_array = [1, 2, 3, 5, 7, 9, 11, 12, 13, 15]</code>, we are going to iterate over it and print each element to the screen using the <code>each</code> method.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">val</span> <span class="p">}</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="mi">11</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="mi">13</span>
</span><span class='line'><span class="mi">15</span>
</span><span class='line'><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">15</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It prints every element in the array and returns the entire array at the end.</p>

<p>Next, lets use the <code>select</code> method to select all even elements from <code>my_array</code>.
We can do something like this:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Or we can do this:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Cute right?</p>

<p>Note: Select returns an array by default, so we didn&#39;t have to <code>puts</code> the value like we did with the <code>each</code> method. Also, when using <code>select</code> method, the code within the block or <code>{ }</code> evaluates to true or false. So when its true it&#39;s going to be selected, if its false it won&#39;t be selected.</p>

<p>Finally, lets use the <code>collect</code> method to square the elements of <code>my_array</code>. We can do this:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">169</span><span class="p">,</span> <span class="mi">225</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note: We can use the <code>map</code> method to achieve the same result.</p>

<p>If we have a hash, how do we get the key and value pairs? We&#39;ll use the <code>each</code> method.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">club</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">man</span> <span class="n">united</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;,</span> <span class="ss">titles</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">manager</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">fergie</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;,</span> <span class="ss">location</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">old</span> <span class="n">trafford</span> <span class="n">manchester</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;club.each { |key, val| puts &amp;quot;key is </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr"> value is </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="sr">&amp;quot; }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;produces&quot;</span><span class="o">&gt;</span><span class="no">Produces</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;key is name value is man uinted</span>
</span><span class='line'><span class="sr">key is title value is 20</span>
</span><span class='line'><span class="sr">key is manager value is fergie</span>
</span><span class='line'><span class="sr">key is location value is old trafford manchester</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>What if we want only the keys from a hash? We&#39;ll use the <code>each_key</code> method like so:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">club</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">man</span> <span class="n">united</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;,</span> <span class="ss">titles</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">manager</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">fergie</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;,</span> <span class="ss">location</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">quot</span><span class="p">;</span><span class="n">old</span> <span class="n">trafford</span> <span class="n">manchester</span><span class="o">&amp;</span><span class="n">quot</span><span class="p">;}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;club.each_key { |key| puts &amp;quot;key is </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">&amp;quot;}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;produces&quot;</span><span class="o">&gt;</span><span class="no">Produces</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;key is name</span>
</span><span class='line'><span class="sr">key is title</span>
</span><span class='line'><span class="sr">key is manager</span>
</span><span class='line'><span class="sr">key is location</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Conclusion: Array and Hash methods are very good to know and this post has covered just a few. Learn more about these methods by looking at several Ruby/Rails APIs.</p>
]]></content>
  </entry>
  
</feed>
