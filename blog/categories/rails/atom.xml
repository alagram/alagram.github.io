<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Albert Agram]]></title>
  <link href="http://alagram.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://alagram.github.io/"/>
  <updated>2013-11-29T10:45:16+00:00</updated>
  <id>http://alagram.github.io/</id>
  <author>
    <name><![CDATA[Albert Agram]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrating to PostgreSQL]]></title>
    <link href="http://alagram.github.io/blog/2013/11/23/migrating-to-postgresql/"/>
    <updated>2013-11-23T18:53:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/11/23/migrating-to-postgresql</id>
    <content type="html"><![CDATA[<!-- more -->


<p>In my recent project, I had to serialize a Hash into my SQLite database. Then I realised the need to search on that column. Upon doing some research, I found that searching a serialized hash column is very inefficient. There was a better way of going about this: using PostgreSQL Hstore! What&rsquo;s a hacker to do? I quickly started to migrate my SQLite database to PostgreSQL.</p>

<p>Found this <a href="http://railscasts.com/episodes/342-migrating-to-postgresql">Railscast</a> which really helped. But there are a few nasty suprises which I&rsquo;d like to put out here for anyone going through this.</p>

<p>The real problem starts during the process of pulling data from SQLite database with <a href="https://github.com/ricardochimal/taps">Taps</a>. This gem provides a <code>taps</code> command that will help serve the one database and also pull data from it into another. First we have to serve our current SQLite database by passing <code>taps</code> a path to the database and also set a username and password. Then we can pull the data from this database into our Postgres database.</p>

<p>However after running this command I got an error that read something like this:</p>

<pre><code>taps cannot load such file -- sqlite3 (LoadError)
</code></pre>

<p>Huh? After hours of frustration I found that <code>Taps</code> depends on <code>rack</code> version <code>1.0.1</code>.</p>

<h2>Solution</h2>

<p>Added the this to <code>Gemfile</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lsquo;rack&rsquo;,’1.0.1’</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then on Terminal run this&hellip;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle update rack</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Taps</code> will now successfully pull data from SQLite into Postgres.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading multiple files with carrierwave using a nested form]]></title>
    <link href="http://alagram.github.io/blog/2013/11/04/uploading-multiple-files-with-carrierwave-and-a-nested-form/"/>
    <updated>2013-11-04T17:00:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/11/04/uploading-multiple-files-with-carrierwave-and-a-nested-form</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I recently needed to create a form for uploading multiple files to a given object. I implemented this with <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a> and <a href="https://github.com/tors/jquery-fileupload-rails">jQuery File Upload</a> gems.</p>

<p>Before we start, we need to make sure models and migrations are setup.
For images, we have the following migration:</p>

<pre><code>class CreateImages &lt; ActiveRecord::Migration
  def change
    create_table :images do |t|
    t.string :image
    t.integer :fraud_id

    t.timestamps
  end
end
</code></pre>

<p>I have the following classes:</p>

<pre><code>class Fraud &lt; ActiveRecord::Base
  has_many :images
  accepts_nested_attributes_for :images
end

class Image &lt; ActiveRecord::Base
  belongs_to :fraud
end
</code></pre>

<p>Added gems to Gemfile:</p>

<pre><code>gem 'carrierwave'
gem 'jquery-fileupload-rails'
</code></pre>

<p>Run <code>bundle install</code> to install gems and dependencies.</p>

<p>Then we create a carrierwave uploader with <code>rails generate uploader image</code> and mount the uploader:</p>

<pre><code>class Image &lt; ActiveRecord::Base
  belongs_to :fraud

  mount_uploader :image, ImageUploader
end
</code></pre>

<p>The carrierwave uploader helps by doing all the heavy lifting with regard to uploading the files.</p>

<p>Now we are ready to work on the view, where the form is modified in the following way:</p>

<pre><code>= render 'shared/errors', object: @fraud

= form_for @fraud, html: { class: "form-horizontal", autocomplete: "off", multipart: true } do |f|
  %fieldset
    .control-group
      = f.label :title, class: 'control-label'
      .controls
        = f.text_field :title, class: 'span3'
    .control-group
      = f.label :description, class: 'control-label'
      .controls
        = f.text_area :description, rows: 6, class: 'span6'
    .control-group
      = f.label :fraud_date, class: 'control-label'
      .controls
        = f.text_field :fraud_date, class: 'span3 fraud_date'
    .control-group
      = f.fields_for :images, Image.new do |ff|
        = ff.label :image, "Upload Evidence", class: 'control-label'
        .controls
          = ff.file_field :image, multiple: true, class: 'btn btn-file', id: 'upload-image', name: "fraud[images_attributes][][image]"
  %fieldset.actions.control-group
    .controls
      = f.submit class: 'btn', id: 'submit-data'
</code></pre>

<p>The form setup is a typical form with a few details:
<code>= f.fields_for :images, Image.new do |ff|</code> creates a nested form. <code>accepts_nested_attributes_for</code> allows the creation of a related object along with the main object. There is good documentation of this <a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for">here</a>. So in this example, we are creating an instance of <code>Fraud</code> class while simultaneously creating an instance of an <code>Image</code> class.</p>

<p>Since by default, most browsers do not allow selection of multiple files, we use <code>multiple: true</code> to change this. Also, we have to change the <code>name</code> attribute of our nested form to make it work with carrierwave. The attribute finally looks like this:</p>

<pre><code>name: "fraud[images_attributes][][image]"
</code></pre>

<p>Lastly, we need our images to be uploaded on submit. jQuery File Upload gem by default tries to upload files immediately after its attached, we need to change this.</p>

<p> We grab the id&rsquo;s of the file field and the submit button and use coffeescript to change this default behaviour to fit our needs:</p>

<pre><code>$ -&gt;
  $("#upload-image").fileupload
  add: (e, data) -&gt;
    data.context = $("#submit-data")
    data.submit()
</code></pre>

<p>That&rsquo;s all folks! With this, on submit, Rails knows to create an instance of Fraud and instances of Image. There is a natural association with Fraud and Image.</p>
]]></content>
  </entry>
  
</feed>
