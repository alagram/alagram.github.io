<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Albert Agram]]></title>
  <link href="http://alagram.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://alagram.github.io/"/>
  <updated>2014-06-17T13:43:40+00:00</updated>
  <id>http://alagram.github.io/</id>
  <author>
    <name><![CDATA[Albert Agram]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set Up Staging Environment for an App]]></title>
    <link href="http://alagram.github.io/blog/2014/04/19/set-up-staging-environment-for-an-app/"/>
    <updated>2014-04-19T10:21:00+00:00</updated>
    <id>http://alagram.github.io/blog/2014/04/19/set-up-staging-environment-for-an-app</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Rails apps usually consist of test, development and production environments. We usually write test code to drive out implementation and make sure things work. However, you generally want to make sure that changes from developemt don&rsquo;t break things in production. For instance, developing on a Windows or Mac machine provides few guarantees that what works on development will work as you expect after deploying to production. This type of requirement calls for another eenvironment called staging. This environment should closely mirrow production. This blog post goes through how to set up a staging environment with a minimum of fuss.</p>

<h2>With App Not Deployed to Production</h2>

<p>If your app has not been pushed to production, i.e , it&rsquo;s sitting on your development machine, you can start at the top of this <a href="https://devcenter.heroku.com/articles/multiple-environments">document</a> and follow the simple steps to set up <code>staging</code> and <code>production</code> remote environments.</p>

<h2>With App Already Deployed to Production</h2>

<p>Alternatively, if your app is already in production, you need to create a copy from the production environment by using the <code>heroku fork</code> command. This <a href="https://devcenter.heroku.com/articles/fork-app">command</a> also copies add-ons, config vars and Heroku Potgres data. Suppose our production app is <code>googleclone</code>, we&rsquo;ll run</p>

<pre><code>heroku fork -a googleclone googleclone-staging
</code></pre>

<p>This will create a copy of googleclone called googleclone-clone</p>

<pre><code>Creating fork googleclone-staging... done
Copying slug... done
Adding heroku-postgresql:some-dev... done
Adding pgbackups:plus to googleclone... done
Adding pgbackups:plus to googleclone-staging... done
Transferring database (this can take some time)...  done
Copying config vars... done
Fork complete, view it at http://googleclone-staging.herokuapp.com/
</code></pre>

<p>With this taken care of, we&rsquo;ll use the <a href="https://github.com/mattpolito/paratrooper">paratrooper gem</a> which provides simple rake tasks and other goodies for Heroku deployment. After the gem is installed, we&rsquo;ll need to create a simple <code>deploy.rake</code> file under <code>lib/tasks</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;lib/</span><span class="n">tasks</span><span class="o">/</span><span class="n">deploy</span><span class="o">.</span><span class="n">rake</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &amp;lsquo;paratrooper&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'> <span class="n">desc</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Deploy</span> <span class="n">app</span> <span class="k">in</span> <span class="n">staging</span> <span class="n">environment</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:staging</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">deployment</span> <span class="o">=</span> <span class="ss">Paratrooper</span><span class="p">:</span><span class="ss">:Deploy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">googleclone</span><span class="o">-</span><span class="n">staging</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">tag</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">staging</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   deployment.deploy</span>
</span><span class='line'><span class="sr"> end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span> <span class="n">desc</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Deploy</span> <span class="n">app</span> <span class="k">in</span> <span class="n">production</span> <span class="n">environment</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">deployment</span> <span class="o">=</span> <span class="ss">Paratrooper</span><span class="p">:</span><span class="ss">:Deploy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">googleclone</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="k">do</span> <span class="o">|</span><span class="n">deploy</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; deploy.tag              = &#39;production&#39;,</span>
</span><span class='line'><span class="sr"> deploy.match_tag        = &#39;staging&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">deployment</span><span class="o">.</span><span class="n">deploy</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can call  <code>rake deploy:staging</code> and <code>rake deploy:production</code> to deploy to <code>staging</code> and <code>production</code> environments respectively.</p>

<p>I hope you found this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Design Resources]]></title>
    <link href="http://alagram.github.io/blog/2014/02/27/web-design-resources/"/>
    <updated>2014-02-27T07:51:00+00:00</updated>
    <id>http://alagram.github.io/blog/2014/02/27/web-design-resources</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Coming up with a good design for a web app can be a challenging task for back-end developers. What are some resources that can help a designed challenged developer get their first prototype out? In this article, we are going to look at some useful resources. We&rsquo;ll start by looking at using a front end framework, then widget libraries and customized themes, and finally how to hire a designer.</p>

<h2>Build Your Prototype with Front End Frameworks</h2>

<p>Using a front end framework like Bootstrap or Foundation can greatly speed up the prototyping process to give you a clean looking user interface. They are pretty easy to get started, and give you a package of good typography, clean default styles, and some common components that you can easily drop into your app. You still have to understand the basics of front end development to blend them in your app&rsquo;s interface, but it generally is not too difficult.</p>

<h4>1) Bootstrap</h4>

<p>If you have ever tried to put together your own design from scratch complete with CSS/Javascript while taking into account responsive design, you&rsquo;ll be amazed at this framework. By far the most popular front-end framwork, <a href="http://getbootstrap.com">Bootstrap</a>, offers little snippets of code that can to put some life into you website. I think the following make Twitter Bootstrap amazing:</p>

<ul>
<li>Responsive design</li>
<li>JavaScript</li>
<li>Typography</li>
<li>Easy integration with most popular frameworks</li>
<li>Wide community adoption</li>
</ul>


<p>Bootstrap is built with the LESS CSS preprocessor, but official Sass support has been added recently. To integrate Bootstrap into your Rails app, just drop the <a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a> gem in your Gemfile, bundle it, and you are ready to go.</p>

<h4>2) Foundation</h4>

<p>Foundation is another front-end framework which offers quick application prototyping. It uses Sass as the default CSS preprocessor. It comes packed with buttons, navigation and other awesome plugins. Foundation has its own features including:</p>

<ul>
<li>Responsive design with a mobile-first grid system</li>
<li>Better semantic markup</li>
<li>Developed and maintained by Zurb, an active design agency</li>
</ul>


<p>Wondering how to use it in a Rails app? There is a gem for that. There is a Railscast on Foundation <a href="http://railscasts.com/episodes/417-foundation">here</a>.</p>

<p>Although the Bootstrap vs Foundation arguments still linger, recent releases have normalized things somewhat. Overall, I&rsquo;ve found that making a choice between these two frameworks is a matter of preference. Bootstrap is a &ldquo;larger&rdquo; framework and comes with more readily made components, aiming to help you &ldquo;bootstrap&rdquo; a prototype as fast as you can. Foundation, on the other hand, is more to give you a solid &ldquo;foundation&rdquo; that you can lay on top of with your own style. Ideally, you should give both frameworks a test drive to see which works for you.</p>

<h2>Use a widget library, or customize themes</h2>

<p>If you use a front end framework, but don&rsquo;t want your app to look exactly like the other thousands that just stick with the framework&rsquo;s default style, you can consider using a widget library or buying a custom theme. Bootstrap shines here with its larger community &ndash; most of the widget libraries and themes you find will be based on Bootstrap.</p>

<ul>
<li><p><a href="https://wrapbootstrap.com/">WrapBootstrap</a>: WrapBootstrap is a marketplace for premium Bootstrap based themes and templates. Using a template is awesome because it gives you the flexibily of picking from many nice designs. On the flip side, you might have to manually copy the templates assets and make them fit onto your app.</p></li>
<li><p><a href="http://designmodo.com/flat/">Designmodo&rsquo;s Flat UI</a>: Based on Bootstrap, <a href="http://designmodo.com/flat/">Designmodo&rsquo;s Flat UI</a> offers all the elements in Bootstrap plus a few more. It offers color swatches and is extremely light and fast. It&rsquo;s also <a href="https://github.com/reflection/designmodo-flatuipro-rails">easy</a> to integrate onto a Rails app. This is not an open-sourced framework.</p></li>
<li><p><a href="http://bootsnipp.com/">Bootsnip</a>: Bootsnip offers a library of code snippets for Bootstrap.</p></li>
<li><p><a href="http://www.divshot.com/">Divshot</a>: Based on Bootstrap, Divshot provides a way to design webpages by using a drag and drop interface. The workspace allows you to drop elements, customize and preview code. You can test on multiple device emulators, export code easily and have your site up quickly.</p></li>
<li><p><a href="https://jetstrap.com/">Jetstrap</a>: Another WYSIWYG Bootstrap page builder, similar to Divshot.</p></li>
</ul>


<h2>Hire Designers</h2>

<p>When you feel that you have validated your prototype and ready to seriously invest in the design and user experience, hiring a designer to work with you closely is an execellent choice. Experienced designers can help you with identifying your targeted audience, brand your product and tell a cohesive story with the combination of typography, colors, layout, logos and interaction.</p>

<p>Finding good designers can be a challenging task, but if you feel your product is ready for some professional touch, here are some places that you can hire designers:</p>

<ul>
<li><p><a href="http://99designs.com/">99designs</a>: A graphic-design marketplace. Designers that work here are typically earlier in their career, but you do get multiple designers to work on your project by hosting a design contest, so you may be able to find some quality work. If you have a small job like designing a logo or a sales page, this can be the cost effective way of finding a good design fast.</p></li>
<li><p><a href="https://www.odesk.com/">oDesk</a>: oDesk is a global job marketplace with a massive pool of professionals ready to help you and your project. This is the place you&rsquo;d go if you want to have someone that you can work with for an extented period of time but doesn&rsquo;t cost a fortune. You will find quite a lot of &ldquo;designers&rdquo; here, but be careful because people here could claim themselves as &ldquo;designers&rdquo; just because they can use photoshop. Look at their work history, feedback from previous employers and portfolio. If you see someone you like, request an interview to talk to them to make sure they communicate well. Start with a small project to see their work. The ideal candidate here for you would be talented designers who are just starting or in parts of the world with lower wages. If you can find your &ldquo;diamond in the rough&rdquo;, keep them around and treat them well!</p></li>
<li><p><a href="http://dribbble.com/">Dribbble</a>: Finally, this is where professional designers hang out. It&rsquo;s more of a place where designers share their work with each other, instead of a &ldquo;designers for hire&rdquo; site, but some designers there are open to take clients. Use location (if you want to hire someone local) and specialties to narrow down your choices, and look at their past work to see if you can find a style that you&rsquo;d like to see in your project. Make sure you contact people only if they are available for hire!</p></li>
</ul>


<h2>Conclusion</h2>

<p>We have discussed quite a few options here for you to consider. Ultimately, you should make your choice based on the phase of your project, your budget and your own skill set. If your project is on the prototype stage, using a front end framework to have a clean looking interface may be all you need. As your project matures and gains traction, that can be the time to start engaging professional designers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full-Text Search on Hstore Column]]></title>
    <link href="http://alagram.github.io/blog/2013/12/09/full-text-search-on-hstore-column/"/>
    <updated>2013-12-09T19:27:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/12/09/full-text-search-on-hstore-column</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I&rsquo;ve come to realise that PostgreSQL is awesome and comes with amazing in-built full-text search features. Another wonderful feature of Postgres is its Hstore schema less key value store. What this does is basically allow us to store data like hashes into a column.</p>

<p>With this knowledge in place, we can query data based on keys and values as shown <a href="http://schneems.com/post/19298469372/you-got-nosql-in-my-postgres-using-hstore-in-rails">here</a>. This is fine and great but how does one search by value regardless of key? Using the examples in the above link won&rsquo;t cut it. Lets assume we&rsquo;re working on a Product model with hstore properties column. Initial solution I came up with involved creating a new column then added <code>before_save</code> and <code>before_update</code> callbacks to save the hash value into this column. It worked Ok but just didn&rsquo;t feel right.</p>

<p>Upon feather research, I found that to do full-text search on hstore I could cast the properties column to text, but in my case I had to cast the values to text. Ended up with one kickasss search method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">def</span> <span class="k">self</span><span class="p">.</span><span class="k">search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conditons</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span><span class="n">EOS</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="n">avals</span><span class="p">(</span><span class="n">properties</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">text</span><span class="p">))</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="o">#</span><span class="err">{</span><span class="n">sanitize</span><span class="p">(</span><span class="n">query</span><span class="p">)</span><span class="err">}</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">EOS</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">where</span><span class="p">(</span><span class="n">conditons</span><span class="p">,</span> <span class="n">query</span><span class="p">).</span><span class="k">order</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">created_at</span> <span class="k">DESC</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>References</h3>

<ul>
<li><a href="http://community.gotealeaf.com/t/search-hstore-column/285">http://community.gotealeaf.com/t/search-hstore-column/285</a></li>
<li><a href="http://terryrfinn.com/posts/1">http://terryrfinn.com/posts/1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to PostgreSQL]]></title>
    <link href="http://alagram.github.io/blog/2013/11/23/migrating-to-postgresql/"/>
    <updated>2013-11-23T18:53:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/11/23/migrating-to-postgresql</id>
    <content type="html"><![CDATA[<!-- more -->


<p>In my recent project, I had to serialize a Hash into my SQLite database. Then I realised the need to search on that column. Upon doing some research, I found that searching a serialized hash column is very inefficient. There was a better way of going about this: using PostgreSQL Hstore! What&rsquo;s a hacker to do? I quickly started to migrate my SQLite database to PostgreSQL.</p>

<p>Found this <a href="http://railscasts.com/episodes/342-migrating-to-postgresql">Railscast</a> which really helped. But there are a few nasty suprises which I&rsquo;d like to put out here for anyone going through this.</p>

<p>The real problem starts during the process of pulling data from SQLite database with <a href="https://github.com/ricardochimal/taps">Taps</a>. This gem provides a <code>taps</code> command that will help serve the one database and also pull data from it into another. First we have to serve our current SQLite database by passing <code>taps</code> a path to the database and also set a username and password. Then we can pull the data from this database into our Postgres database.</p>

<p>However after running this command I got an error that read something like this:</p>

<pre><code>taps cannot load such file -- sqlite3 (LoadError)
</code></pre>

<p>Huh? After hours of frustration I found that <code>Taps</code> depends on <code>rack</code> version <code>1.0.1</code>.</p>

<h2>Solution</h2>

<p>Added the this to <code>Gemfile</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lsquo;rack&rsquo;,’1.0.1’</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then on Terminal run this&hellip;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle update rack</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Taps</code> will now successfully pull data from SQLite into Postgres.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading multiple files with carrierwave using a nested form]]></title>
    <link href="http://alagram.github.io/blog/2013/11/04/uploading-multiple-files-with-carrierwave-and-a-nested-form/"/>
    <updated>2013-11-04T17:00:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/11/04/uploading-multiple-files-with-carrierwave-and-a-nested-form</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I recently needed to create a form for uploading multiple files to a given object. I implemented this with <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a> and <a href="https://github.com/tors/jquery-fileupload-rails">jQuery File Upload</a> gems.</p>

<p>Before we start, we need to make sure models and migrations are setup.
For images, we have the following migration:</p>

<pre><code>class CreateImages &lt; ActiveRecord::Migration
  def change
    create_table :images do |t|
    t.string :image
    t.integer :fraud_id

    t.timestamps
  end
end
</code></pre>

<p>I have the following classes:</p>

<pre><code>class Fraud &lt; ActiveRecord::Base
  has_many :images
  accepts_nested_attributes_for :images
end

class Image &lt; ActiveRecord::Base
  belongs_to :fraud
end
</code></pre>

<p>Added gems to Gemfile:</p>

<pre><code>gem 'carrierwave'
gem 'jquery-fileupload-rails'
</code></pre>

<p>Run <code>bundle install</code> to install gems and dependencies.</p>

<p>Then we create a carrierwave uploader with <code>rails generate uploader image</code> and mount the uploader:</p>

<pre><code>class Image &lt; ActiveRecord::Base
  belongs_to :fraud

  mount_uploader :image, ImageUploader
end
</code></pre>

<p>The carrierwave uploader helps by doing all the heavy lifting with regard to uploading the files.</p>

<p>Now we are ready to work on the view, where the form is modified in the following way:</p>

<pre><code>= render 'shared/errors', object: @fraud

= form_for @fraud, html: { class: "form-horizontal", autocomplete: "off", multipart: true } do |f|
  %fieldset
    .control-group
      = f.label :title, class: 'control-label'
      .controls
        = f.text_field :title, class: 'span3'
    .control-group
      = f.label :description, class: 'control-label'
      .controls
        = f.text_area :description, rows: 6, class: 'span6'
    .control-group
      = f.label :fraud_date, class: 'control-label'
      .controls
        = f.text_field :fraud_date, class: 'span3 fraud_date'
    .control-group
      = f.fields_for :images, Image.new do |ff|
        = ff.label :image, "Upload Evidence", class: 'control-label'
        .controls
          = ff.file_field :image, multiple: true, class: 'btn btn-file', id: 'upload-image', name: "fraud[images_attributes][][image]"
  %fieldset.actions.control-group
    .controls
      = f.submit class: 'btn', id: 'submit-data'
</code></pre>

<p>The form setup is a typical form with a few details:
<code>= f.fields_for :images, Image.new do |ff|</code> creates a nested form. <code>accepts_nested_attributes_for</code> allows the creation of a related object along with the main object. There is good documentation of this <a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for">here</a>. So in this example, we are creating an instance of <code>Fraud</code> class while simultaneously creating an instance of an <code>Image</code> class.</p>

<p>Since by default, most browsers do not allow selection of multiple files, we use <code>multiple: true</code> to change this. Also, we have to change the <code>name</code> attribute of our nested form to make it work with carrierwave. The attribute finally looks like this:</p>

<pre><code>name: "fraud[images_attributes][][image]"
</code></pre>

<p>Lastly, we need our images to be uploaded on submit. jQuery File Upload gem by default tries to upload files immediately after its attached, we need to change this.</p>

<p> We grab the id&rsquo;s of the file field and the submit button and use coffeescript to change this default behaviour to fit our needs:</p>

<pre><code>$ -&gt;
  $("#upload-image").fileupload
  add: (e, data) -&gt;
    data.context = $("#submit-data")
    data.submit()
</code></pre>

<p>That&rsquo;s all folks! With this, on submit, Rails knows to create an instance of Fraud and instances of Image. There is a natural association with Fraud and Image.</p>
]]></content>
  </entry>
  
</feed>
