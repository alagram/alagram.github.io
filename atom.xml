<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Albert Agram]]></title>
  <link href="http://alagram.github.io/atom.xml" rel="self"/>
  <link href="http://alagram.github.io/"/>
  <updated>2014-06-16T13:39:52+00:00</updated>
  <id>http://alagram.github.io/</id>
  <author>
    <name><![CDATA[Albert Agram]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set Up Staging Environment for an App]]></title>
    <link href="http://alagram.github.io/blog/2014/04/19/set-up-staging-environment-for-an-app/"/>
    <updated>2014-04-19T10:21:00+00:00</updated>
    <id>http://alagram.github.io/blog/2014/04/19/set-up-staging-environment-for-an-app</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Rails apps usually consist of test, development and production environments. We usually write test code to drive out implementation and make sure things work. However, you generally want to make sure that changes from developemt don&rsquo;t break things in production. For instance, developing on a Windows or Mac machine provides few guarantees that what works on development will work as you expect after deploying to production. This type of requirement calls for another eenvironment called staging. This environment should closely mirrow production. This blog post goes through how to set up a staging environment with a minimum of fuss.</p>

<h2>With App Not Deployed to Production</h2>

<p>If your app has not been pushed to production, i.e , it&rsquo;s sitting on your development machine, you can start at the top of this <a href="https://devcenter.heroku.com/articles/multiple-environments">document</a> and follow the simple steps to set up <code>staging</code> and <code>production</code> remote environments.</p>

<h2>With App Already Deployed to Production</h2>

<p>Alternatively, if your app is already in production, you need to create a copy from the production environment by using the <code>heroku fork</code> command. This <a href="https://devcenter.heroku.com/articles/fork-app">command</a> also copies add-ons, config vars and Heroku Potgres data. Suppose our production app is <code>googleclone</code>, we&rsquo;ll run</p>

<pre><code>heroku fork -a googleclone googleclone-staging
</code></pre>

<p>This will create a copy of googleclone called googleclone-clone</p>

<pre><code>Creating fork googleclone-staging... done
Copying slug... done
Adding heroku-postgresql:some-dev... done
Adding pgbackups:plus to googleclone... done
Adding pgbackups:plus to googleclone-staging... done
Transferring database (this can take some time)...  done
Copying config vars... done
Fork complete, view it at http://googleclone-staging.herokuapp.com/
</code></pre>

<p>With this taken care of, we&rsquo;ll use the <a href="https://github.com/mattpolito/paratrooper">paratrooper gem</a> which provides simple rake tasks and other goodies for Heroku deployment. After the gem is installed, we&rsquo;ll need to create a simple <code>deploy.rake</code> file under <code>lib/tasks</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/tasks/deploy.rake</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;paratrooper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'> <span class="n">desc</span> <span class="s1">&#39;Deploy app in staging environment&#39;</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:staging</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">deployment</span> <span class="o">=</span> <span class="ss">Paratrooper</span><span class="p">:</span><span class="ss">:Deploy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;googleclone-staging&quot;</span><span class="p">,</span> <span class="ss">tag</span><span class="p">:</span> <span class="s1">&#39;staging&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">deployment</span><span class="o">.</span><span class="n">deploy</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="n">desc</span> <span class="s1">&#39;Deploy app in production environment&#39;</span>
</span><span class='line'> <span class="n">task</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">deployment</span> <span class="o">=</span> <span class="ss">Paratrooper</span><span class="p">:</span><span class="ss">:Deploy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;googleclone&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">deploy</span><span class="o">|</span>
</span><span class='line'>     <span class="n">deploy</span><span class="o">.</span><span class="n">tag</span>              <span class="o">=</span> <span class="s1">&#39;production&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="n">deploy</span><span class="o">.</span><span class="n">match_tag</span>        <span class="o">=</span> <span class="s1">&#39;staging&#39;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">deployment</span><span class="o">.</span><span class="n">deploy</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can call  <code>rake deploy:staging</code> and <code>rake deploy:production</code> to deploy to <code>staging</code> and <code>production</code> environments respectively.</p>

<p>I hope you found this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic SQL]]></title>
    <link href="http://alagram.github.io/blog/2014/04/07/basic-sql/"/>
    <updated>2014-04-07T11:35:00+00:00</updated>
    <id>http://alagram.github.io/blog/2014/04/07/basic-sql</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Introduction</h2>

<p>In this blog post, we want to introduce you to SQL and Databases. We want to make sur you understand what&rsquo;s happening behind the scenes before diving in the <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> world with Rails. We&rsquo;ll start by explaining the key concepts of databases. Later, we&rsquo;ll introduce you to some basic SQL commands and syntax while buiding a database of our favourite books.</p>

<!-- In this blog post, we'll look at basic SQL concepts while building a database of our favorite books. The best way to learn is by practicing the commands in a real relational database. We'll make use of MySQL, however, any relational database product will also work. -->




<!-- ####1.0) An Introduction to SQL and Explaining Tables -->


<h4>1) Bird&rsquo;s eye view of Databases</h4>

<p>Lets suppose we have to store the name, address and age of a few hundred people. We could easily start by opening up a text file and inputting our values. The advantage is this is very easy to setup and use. And although the first ten to twenty will look great, overtime you&rsquo;ll find that we&rsquo;ll have typos and duplicate data. Also, we have to manually keep track of every single dataset. Further, we&rsquo;ll also have to query our data for information purposes. At this point you&rsquo;ll realise that we have a huge problem. We need a better way to organize our data.</p>

<p>This is where relational databases come into play. Relational databases offer a general-purpose solution for organizing data with mimimum redundancy.</p>

<p>A database is a collection of organized data. It is worth explaining that <code>relational</code> here doesn&rsquo;t mean relationships. Relational here has a mathematical <a href="http://en.wikipedia.org/wiki/Relational_model">basis</a>. When used in connection with databases, it means a system where we can store data in a tabular fashion.</p>

<p>Structured Query Language or <code>SQL</code> is the standard language used for  communicating with relational databases. Software which is used to manage digital databases is called a Database Management System (DBMS).</p>

<p>What follows is an explanation of the core concepts of Databases.</p>

<h5>What is a Table?</h5>

<p>To help you properly accept the concept of databases, we&rsquo;re going to use spreadsheets as an analogy. To optimize the use of spreadsheets, we usually create a file or a workbook with multiple sheets. If you want to store data in a spreadsheet you&rsquo;ll have to make use of rows and columns.</p>

<p>Suppose we have two sheets inside our workbook that keep track of users and reviews respectively:</p>

<p><img class="center" src="http://alagram.github.io/images/users.png" width="400" height="400" title="users" alt="images"></p>

<p><img class="center" src="http://alagram.github.io/images/reviews.png" width="400" height="400" title="reviews" alt="images"></p>

<p>Our first sheet has 3 columns that help us keep track of a user&rsquo;s <code>id</code>, <code>username</code> and <code>email</code>. The second sheet has two columns: <code>id</code> and <code>content</code>. Lets call these sheets <code>users</code> and <code>reviews</code>.</p>

<p>Technically, in relational databases, a table is an organized set of data elements where columns describe the type of data and rows contain the actual data to be stored. A sheet is a perfect analogy of a table within a database.</p>

<h5>Rows and Columns</h5>

<p>A relational database has columns and rows. A row represents a single set of related data whiles a column provides a standardized way of storing data in the rows of a database. For instance, in our <code>users</code> sheet, the <code>username</code> column is set up to contain only the username value of a particular user. We cannot store a integer in this column. Also, the first row contains data related to john.</p>

<h5>Relational Database Views</h5>

<p>The two main views are data and schema views. The dataview displays with columns at the top and rows of data for each dataset, just like an Excel spreadsheet. It shows the data in a table. A schema view shows the column names and column type.</p>

<p><img class="center" src="http://alagram.github.io/images/schema_view.png" width="600" height="500" title="schema view" alt="images"></p>

<h5>Interacting with a database</h5>

<p>Relational database interfaces are in two forms, GUI and command line. It is important to note that they all the same. Making a choice between these two is a matter of preference.</p>

<h5>Primary Key and Foreign Key</h5>

<p>There is a unique column to keep track of each row of data. This column is called primary key. Most relational databases default this to the <code>id</code> column. Rails use&rsquo;s this default as well.</p>

<p>Foreign key helps is link information from one table to another. The foreign key column will contain the primary key of another table. Lets suppose we want to link our <code>users</code> and <code>reviews</code> tables to keep track of who a review belongs to. We could create a <code>review_username</code> column to store the user&rsquo;s <code>username</code> in our <code>reviews</code> table. But the problem with this approach is the <code>username</code> column is not unique. There could be multiple Sam&rsquo;s in the <code>users</code> table. We need a unique column and the perfect candidate is the <code>id</code> column. <code>user_id</code> will become our foreign key created in the <code>reviews</code> table.</p>

<p><img class="center" src="http://alagram.github.io/images/foreign_key.png" width="400" height="400" title="foreign key" alt="images"></p>

<p>Now the first review belongs to alice, the second belongs to john and the last review belongs to sam.</p>

<p>With these basic concepts out of the way, we&rsquo;ll get our hands dirty with some basic SQL syntax in the next section.</p>

<h4>2) SQL Fundamentals</h4>

<p><em><strong>Note on being hands-on:</strong> Like all crafts, you need hands-on practice to gain experience. That&rsquo;s the approach the rest of this tutorial takes. We want you to actually write the codes and follow along. If you read through this tutorial without writing any code, it is likely you will understand the theories. But you will not actually be able to do it. We believe the best way to learn is by doing these tasks. So buckle up and lets go!</em></p>

<h5>Getting started</h5>

<p>For the sake of simplicity we&rsquo;ll use <a href="https://sqlite.org/">SQLite3</a>. If you&rsquo;re on Mac OSX you can install <code>SQLite3</code> using <a href="http://brew.sh/">Homebrew</a> by running <code>brew install sqlite3</code>. Windows users can download and install <code>SQLite3</code> <a href="http://www.sqlite.org/download.html">here</a>. See <a href="http://www.thegeekstuff.com/2011/07/install-sqlite3/">here</a> for Linux installation instructions.</p>

<h5>Data Definition Language</h5>

<p>SQL has basics verbs. You can think of them as different ways to talk to a database. They are:</p>

<ul>
<li>Data Manipulation Language: INSERT, UPDATE, DELETE</li>
<li>Data Query Language: SELECT</li>
<li>Data Control Language: GRANT, REVOKE etc.</li>
<li>Transaction Control Commands: COMMIT, ROLLBACK ect.</li>
</ul>


<h5>SQL Data types</h5>

<p>Just like the Ruby language has data types like <code>Array</code>, <code>Hash</code> etc, SQL also has its special data-types. The common ones are:</p>

<ul>
<li>Variable length characters    (<code>varchar</code>)</li>
<li>Integer values             (<code>int</code>)</li>
<li>Decimal numbers            (<code>decimal</code>)</li>
<li>Date data type             (<code>date</code>)</li>
</ul>


<h5>Creating a Database</h5>

<p>Its time to get our feet wet vy creating our first database. Databases serve as a holding envelop for tables. If you recall from our earlier analogy, its like a spreadsheet. We&rsquo;ll create a database named <code>library</code> from the command line:</p>

<p>Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">sqlite3</span> <span class="n">library</span><span class="p">.</span><span class="n">db</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Table Creation</h5>

<p>Next, we&rsquo;ll create a <code>books_tbl</code> table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">books_tbl</span> <span class="p">(</span><span class="n">id</span> <span class="nb">INTEGER</span><span class="p">,</span> <span class="n">title</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="n">author</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">15</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Inserting data</h5>

<p>We&rsquo;re all set now; lets populate our table with some data. To polupate data we use the <code>INSERT</code> command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books_tbl</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;The Famous 5&#39;</span><span class="p">,</span> <span class="s1">&#39;Enid Blyton&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books_tbl</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;Sweet Valley&#39;</span><span class="p">,</span>  <span class="s1">&#39;Francine Pascal&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. Working with Constraints</h4>

<p>So far, we&rsquo;ve created a table and populated it with data, but we have some problems to deal with. We want our table to hold meaningful information about our books. In that regard, it would make sense to create our table in such a way that certain fields do not accept empty or <code>NULL</code> values. This is where constraints come in.</p>

<p>Contstraints are rules to abide by while doing SQL operations. Constraints help make data in your database more useful and structured. For instance, every book must have a title, author and year. Below we create a table that accepts <code>NULL</code> constraints in some fields.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">books_tbl_cp</span> <span class="p">(</span><span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">title</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">author</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">published</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">publisher</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we&rsquo;ve done is to ensure that only <code>publisher</code> field will accept empty or <code>NULL</code> values. Let&rsquo;s populate this table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books_tbl_cp</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;The Famous 5&#39;</span><span class="p">,</span> <span class="s1">&#39;Enid Blyton&#39;</span><span class="p">,</span> <span class="mi">1942</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books_tbl_cp</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;Sweet Valley&#39;</span><span class="p">,</span> <span class="s1">&#39;Francine Pascal&#39;</span><span class="p">,</span> <span class="mi">1983</span><span class="p">,</span> <span class="s1">&#39;Random House&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we try to insert data into an column with a constraint set to <code>NOT NULL</code>, we&rsquo;ll see an error. Try it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books_tbl_cp</span> <span class="k">VALUES</span> <span class="p">(</span><span class="k">NULL</span><span class="p">,</span> <span class="s1">&#39;Some Book&#39;</span><span class="p">,</span> <span class="s1">&#39;Our favorite writer&#39;</span><span class="p">,</span> <span class="mi">2001</span><span class="p">,</span> <span class="s1">&#39;Random House&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Error</span><span class="p">:</span> <span class="n">books_tbl_cp</span><span class="p">.</span><span class="n">id</span> <span class="n">may</span> <span class="k">not</span> <span class="n">be</span> <span class="k">NULL</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Primary Key Constraint</h5>

<p>We&rsquo;ve solved one problem, but we&rsquo;re faced with yet another. We have to ensure that none of the records would duplicate information about the same book. Let&rsquo;s demostrate we can actually do this with code that insert a duplicate <code>id</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">books_tbl_cp</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Yet Another Awesome Book&#39;</span><span class="p">,</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">,</span> <span class="mi">2014</span><span class="p">,</span> <span class="s1">&#39;Random House&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>A primary key is used to ensure uniqueness of data. It&rsquo;s also used to identify a row of data in a table, is almost always a number value and does not allow <code>NULL</code> values. Also, a table can only have one primary key. ID fields are generally used as primary keys.</p>

<p>To deonstrate, lets create a new table <code>fav_books_tbl</code> with a <code>primary key</code> set to the <code>id</code> field. Also, we&rsquo;d like to have our <code>primary key</code> auto incremented without specifying a value.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">fav_books_tbl</span> <span class="p">(</span>
</span><span class='line'>   <span class="n">id</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTOINCREMENT</span><span class="p">,</span>
</span><span class='line'>   <span class="n">title</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>   <span class="n">author</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>   <span class="n">published</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>   <span class="n">publisher</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">NULL</span>
</span><span class='line'>  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we do not have to specify the <code>id</code> value as it&rsquo;ll be tracked and auto-incremented by our database:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">fav_books_tbl</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">published</span><span class="p">,</span> <span class="n">publisher</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;The Famous 5&#39;</span><span class="p">,</span> <span class="s1">&#39;Enid Blyton&#39;</span><span class="p">,</span> <span class="mi">1942</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">fav_books_tbl</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">published</span><span class="p">,</span> <span class="n">publisher</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Sweet Valley&#39;</span><span class="p">,</span> <span class="s1">&#39;Francine Pascal&#39;</span><span class="p">,</span> <span class="mi">1983</span><span class="p">,</span> <span class="s1">&#39;Random House&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, when we try to insert duplicate <code>id</code> fields, our databse will complain. Try it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">fav_books_tbl</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Sweet Valley&#39;</span><span class="p">,</span> <span class="s1">&#39;Francine Pascal&#39;</span><span class="p">,</span> <span class="mi">1983</span><span class="p">,</span> <span class="s1">&#39;NULL&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Error</span><span class="p">:</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">must</span> <span class="n">be</span> <span class="k">unique</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have learned about Primary Keys and why they&rsquo;re necessary. Also, we&rsquo;ve seen a different way of inserting data into a table. Next, we&rsquo;ll look at Unique Key Constraint.</p>

<h5>Unique Key Constraint</h5>

<p>Let&rsquo;s things up a notch by exploring the concept of a unique key. A unique key, like the primary key is used to ensure uniqueness of data. Unique key, makes sure that data is not duplicated in two rows in the database. There are subtle differences between the two. For example, a table can have more than one unique key. A field with a unique key can take only one NULL value.</p>

<p>In our case, we can now decide to make <code>title</code> field unique. This would ensure that there are no duplicate titles in our table. This time we&rsquo;ll only modify the column.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">fav_books_tbl</span> <span class="k">MODIFY</span> <span class="k">COLUMN</span> <span class="n">title</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">UNIQUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our <code>fav_books_tbl</code> table ensures the <code>title</code> column does not have duplicate records. Give it a shot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">fav_books_tbl</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">published</span><span class="p">,</span> <span class="n">publisher</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;The Famous 5&#39;</span><span class="p">,</span> <span class="s1">&#39;Enid Blyton&#39;</span><span class="p">,</span> <span class="mi">1942</span><span class="p">,</span> <span class="k">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4) Operations on Tables</h4>

<p>Lets clean up our database by learning a few Table Operations.</p>

<h5>Dropping Tables</h5>

<p>We drop tables in SQL with the <code>DROP TABLE</code> command. Lets go ahead and drop a few tables.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">books_tbl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Modifying tables</h5>

<p>We&rsquo;ve already modified a table but we&rsquo;ll go over it again. After a table has been created, we can change its structure by using the <code>ALTER TABLE</code> command.</p>

<p>We&rsquo;ll modify some attributes of <code>fav_books_tbl</code>. Lets change the <code>author</code> field to type <code>VARCHAR(100)</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">fav_books_tbl</span> <span class="k">MODIFY</span> <span class="n">author</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To verify that the change took effect you can use the <code>DESCRIBE</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DESCRIBE</span> <span class="n">fav_books_tbl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5) Simple SQL Queries</h4>

<p>Before moving on to more interesting querying, lets insert some data into our table.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">fav_books_tbl</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">published</span><span class="p">,</span> <span class="n">publisher</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Twelve Years A Slave&#39;</span><span class="p">,</span> <span class="s1">&#39;Solomon Northup&#39;</span><span class="p">,</span> <span class="mi">1853</span><span class="p">,</span> <span class="s1">&#39;Derby &amp; Miller, Auburn, New York&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">fav_books_tbl</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">published</span><span class="p">,</span> <span class="n">publisher</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;David and Goliath&#39;</span><span class="p">,</span> <span class="s1">&#39;Malcolm Gladwell&#39;</span><span class="p">,</span> <span class="mi">2013</span><span class="p">,</span> <span class="s1">&#39;Little, Brown and Company&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">fav_books_tbl</span> <span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">published</span><span class="p">,</span> <span class="n">publisher</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;The Power of Habit&#39;</span><span class="p">,</span> <span class="s1">&#39;Charles Duhigg&#39;</span><span class="p">,</span> <span class="mi">2012</span><span class="p">,</span> <span class="s1">&#39;Random House&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Selecting all records from a table</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">fav_books_tbl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query will return all 4 rows in <code>fav_books_tbl</code> table.</p>

<h5>Selecting a limited number of columns</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">author</span> <span class="k">FROM</span> <span class="n">fav_books_tbl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<table>
<thead>
<tr>
<th></th>
<th> title                 </th>
<th> author          </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> The Famous 5          </td>
<td> Enid Blyton</td>
</tr>
<tr>
<td></td>
<td> Twelve Years A Slave  </td>
<td> Solomon Northup</td>
</tr>
<tr>
<td></td>
<td> David and Goliath     </td>
<td> Malcolm Gladwell</td>
</tr>
<tr>
<td></td>
<td> The Power of Habit    </td>
<td> Charles Duhigg</td>
</tr>
</tbody>
</table>


<p>Output showing fields constructed in the query.</p>

<h5>Ordering results</h5>

<p>Suppose we want to order results from a query, say, by title and  published date.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">published</span> <span class="k">FROM</span> <span class="n">fav_books_tbl</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">published</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<table>
<thead>
<tr>
<th></th>
<th> title                 </th>
<th> published       </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Twelve Years A Slave  </td>
<td> 1853</td>
</tr>
<tr>
<td></td>
<td> The Famous 5          </td>
<td> 1942</td>
</tr>
<tr>
<td></td>
<td> The Power of Habit    </td>
<td> 2012</td>
</tr>
<tr>
<td></td>
<td> David and Goliath     </td>
<td> 2013</td>
</tr>
</tbody>
</table>


<p>Next lets further sort by descending and ascending respectively.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">published</span> <span class="k">FROM</span> <span class="n">fav_books_tbl</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">published</span> <span class="k">DESC</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<table>
<thead>
<tr>
<th></th>
<th> title                 </th>
<th> published       </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> David and Goliath     </td>
<td> 2013</td>
</tr>
<tr>
<td></td>
<td> The Power of Habit    </td>
<td> 2012</td>
</tr>
<tr>
<td></td>
<td> The Famous 5          </td>
<td> 1942</td>
</tr>
<tr>
<td></td>
<td> Twelve Years A Slave  </td>
<td> 1853</td>
</tr>
</tbody>
</table>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">published</span> <span class="k">FROM</span> <span class="n">fav_books_tbl</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">published</span> <span class="k">ASC</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th></th>
<th> title                 </th>
<th> published       </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Twelve Years A Slave  </td>
<td> 1853</td>
</tr>
<tr>
<td></td>
<td> The Famous 5          </td>
<td> 1942</td>
</tr>
<tr>
<td></td>
<td> The Power of Habit    </td>
<td> 2012</td>
</tr>
<tr>
<td></td>
<td> David and Goliath     </td>
<td> 2013</td>
</tr>
</tbody>
</table>


<p>We could order a query with an abbreviation instead of the column name.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">title</span><span class="p">,</span> <span class="n">published</span> <span class="k">FROM</span> <span class="n">fav_books_tbl</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="k">ASC</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Abbreviations start from 1 which is given to the first column we specify et cetera. So we&rsquo;ve succeeded in reproducing our previous query, with the 2 in place of <code>published</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Design Resources]]></title>
    <link href="http://alagram.github.io/blog/2014/02/27/web-design-resources/"/>
    <updated>2014-02-27T07:51:00+00:00</updated>
    <id>http://alagram.github.io/blog/2014/02/27/web-design-resources</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Coming up with a good design for a web app can be a challenging task for back-end developers. What are some resources that can help a designed challenged developer get their first prototype out? In this article, we are going to look at some useful resources. We&rsquo;ll start by looking at using a front end framework, then widget libraries and customized themes, and finally how to hire a designer.</p>

<h2>Build Your Prototype with Front End Frameworks</h2>

<p>Using a front end framework like Bootstrap or Foundation can greatly speed up the prototyping process to give you a clean looking user interface. They are pretty easy to get started, and give you a package of good typography, clean default styles, and some common components that you can easily drop into your app. You still have to understand the basics of front end development to blend them in your app&rsquo;s interface, but it generally is not too difficult.</p>

<h4>1) Bootstrap</h4>

<p>If you have ever tried to put together your own design from scratch complete with CSS/Javascript while taking into account responsive design, you&rsquo;ll be amazed at this framework. By far the most popular front-end framwork, <a href="http://getbootstrap.com">Bootstrap</a>, offers little snippets of code that can to put some life into you website. I think the following make Twitter Bootstrap amazing:</p>

<ul>
<li>Responsive design</li>
<li>JavaScript</li>
<li>Typography</li>
<li>Easy integration with most popular frameworks</li>
<li>Wide community adoption</li>
</ul>


<p>Bootstrap is built with the LESS CSS preprocessor, but official Sass support has been added recently. To integrate Bootstrap into your Rails app, just drop the <a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a> gem in your Gemfile, bundle it, and you are ready to go.</p>

<h4>2) Foundation</h4>

<p>Foundation is another front-end framework which offers quick application prototyping. It uses Sass as the default CSS preprocessor. It comes packed with buttons, navigation and other awesome plugins. Foundation has its own features including:</p>

<ul>
<li>Responsive design with a mobile-first grid system</li>
<li>Better semantic markup</li>
<li>Developed and maintained by Zurb, an active design agency</li>
</ul>


<p>Wondering how to use it in a Rails app? There is a gem for that. There is a Railscast on Foundation <a href="http://railscasts.com/episodes/417-foundation">here</a>.</p>

<p>Although the Bootstrap vs Foundation arguments still linger, recent releases have normalized things somewhat. Overall, I&rsquo;ve found that making a choice between these two frameworks is a matter of preference. Bootstrap is a &ldquo;larger&rdquo; framework and comes with more readily made components, aiming to help you &ldquo;bootstrap&rdquo; a prototype as fast as you can. Foundation, on the other hand, is more to give you a solid &ldquo;foundation&rdquo; that you can lay on top of with your own style. Ideally, you should give both frameworks a test drive to see which works for you.</p>

<h2>Use a widget library, or customize themes</h2>

<p>If you use a front end framework, but don&rsquo;t want your app to look exactly like the other thousands that just stick with the framework&rsquo;s default style, you can consider using a widget library or buying a custom theme. Bootstrap shines here with its larger community &ndash; most of the widget libraries and themes you find will be based on Bootstrap.</p>

<ul>
<li><p><a href="https://wrapbootstrap.com/">WrapBootstrap</a>: WrapBootstrap is a marketplace for premium Bootstrap based themes and templates. Using a template is awesome because it gives you the flexibily of picking from many nice designs. On the flip side, you might have to manually copy the templates assets and make them fit onto your app.</p></li>
<li><p><a href="http://designmodo.com/flat/">Designmodo&rsquo;s Flat UI</a>: Based on Bootstrap, <a href="http://designmodo.com/flat/">Designmodo&rsquo;s Flat UI</a> offers all the elements in Bootstrap plus a few more. It offers color swatches and is extremely light and fast. It&rsquo;s also <a href="https://github.com/reflection/designmodo-flatuipro-rails">easy</a> to integrate onto a Rails app. This is not an open-sourced framework.</p></li>
<li><p><a href="http://bootsnipp.com/">Bootsnip</a>: Bootsnip offers a library of code snippets for Bootstrap.</p></li>
<li><p><a href="http://www.divshot.com/">Divshot</a>: Based on Bootstrap, Divshot provides a way to design webpages by using a drag and drop interface. The workspace allows you to drop elements, customize and preview code. You can test on multiple device emulators, export code easily and have your site up quickly.</p></li>
<li><p><a href="https://jetstrap.com/">Jetstrap</a>: Another WYSIWYG Bootstrap page builder, similar to Divshot.</p></li>
</ul>


<h2>Hire Designers</h2>

<p>When you feel that you have validated your prototype and ready to seriously invest in the design and user experience, hiring a designer to work with you closely is an execellent choice. Experienced designers can help you with identifying your targeted audience, brand your product and tell a cohesive story with the combination of typography, colors, layout, logos and interaction.</p>

<p>Finding good designers can be a challenging task, but if you feel your product is ready for some professional touch, here are some places that you can hire designers:</p>

<ul>
<li><p><a href="http://99designs.com/">99designs</a>: A graphic-design marketplace. Designers that work here are typically earlier in their career, but you do get multiple designers to work on your project by hosting a design contest, so you may be able to find some quality work. If you have a small job like designing a logo or a sales page, this can be the cost effective way of finding a good design fast.</p></li>
<li><p><a href="https://www.odesk.com/">oDesk</a>: oDesk is a global job marketplace with a massive pool of professionals ready to help you and your project. This is the place you&rsquo;d go if you want to have someone that you can work with for an extented period of time but doesn&rsquo;t cost a fortune. You will find quite a lot of &ldquo;designers&rdquo; here, but be careful because people here could claim themselves as &ldquo;designers&rdquo; just because they can use photoshop. Look at their work history, feedback from previous employers and portfolio. If you see someone you like, request an interview to talk to them to make sure they communicate well. Start with a small project to see their work. The ideal candidate here for you would be talented designers who are just starting or in parts of the world with lower wages. If you can find your &ldquo;diamond in the rough&rdquo;, keep them around and treat them well!</p></li>
<li><p><a href="http://dribbble.com/">Dribbble</a>: Finally, this is where professional designers hang out. It&rsquo;s more of a place where designers share their work with each other, instead of a &ldquo;designers for hire&rdquo; site, but some designers there are open to take clients. Use location (if you want to hire someone local) and specialties to narrow down your choices, and look at their past work to see if you can find a style that you&rsquo;d like to see in your project. Make sure you contact people only if they are available for hire!</p></li>
</ul>


<h2>Conclusion</h2>

<p>We have discussed quite a few options here for you to consider. Ultimately, you should make your choice based on the phase of your project, your budget and your own skill set. If your project is on the prototype stage, using a front end framework to have a clean looking interface may be all you need. As your project matures and gains traction, that can be the time to start engaging professional designers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full-Text Search on Hstore Column]]></title>
    <link href="http://alagram.github.io/blog/2013/12/09/full-text-search-on-hstore-column/"/>
    <updated>2013-12-09T19:27:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/12/09/full-text-search-on-hstore-column</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I&rsquo;ve come to realise that PostgreSQL is awesome and comes with amazing in-built full-text search features. Another wonderful feature of Postgres is its Hstore schema less key value store. What this does is basically allow us to store data like hashes into a column.</p>

<p>With this knowledge in place, we can query data based on keys and values as shown <a href="http://schneems.com/post/19298469372/you-got-nosql-in-my-postgres-using-hstore-in-rails">here</a>. This is fine and great but how does one search by value regardless of key? Using the examples in the above link won&rsquo;t cut it. Lets assume we&rsquo;re working on a Product model with hstore properties column. Initial solution I came up with involved creating a new column then added <code>before_save</code> and <code>before_update</code> callbacks to save the hash value into this column. It worked Ok but just didn&rsquo;t feel right.</p>

<p>Upon feather research, I found that to do full-text search on hstore I could cast the properties column to text, but in my case I had to cast the values to text. Ended up with one kickasss search method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">def</span> <span class="k">self</span><span class="p">.</span><span class="k">search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conditons</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="n">EOS</span>
</span><span class='line'>    <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="n">avals</span><span class="p">(</span><span class="n">properties</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">text</span><span class="p">))</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="s1">&#39;english&#39;</span><span class="p">,</span> <span class="o">#</span><span class="err">{</span><span class="n">sanitize</span><span class="p">(</span><span class="n">query</span><span class="p">)</span><span class="err">}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">EOS</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">where</span><span class="p">(</span><span class="n">conditons</span><span class="p">,</span> <span class="n">query</span><span class="p">).</span><span class="k">order</span><span class="p">(</span><span class="ss">&quot;created_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<ul>
<li><a href="http://community.gotealeaf.com/t/search-hstore-column/285">http://community.gotealeaf.com/t/search-hstore-column/285</a></li>
<li><a href="http://terryrfinn.com/posts/1">http://terryrfinn.com/posts/1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing multiple file upload with Rspec, Fabrication and carrierwave]]></title>
    <link href="http://alagram.github.io/blog/2013/11/28/testing-multiple-file-upload-with-rspec-fabrication-and-carrierwave/"/>
    <updated>2013-11-28T20:26:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/11/28/testing-multiple-file-upload-with-rspec-fabrication-and-carrierwave</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I ran into some problems when testing controller code with Rpsec while generating objects with fabrication. Most tests failed after I set validation on an Image object.</p>

<p>My setup:</p>

<ul>
<li>fabrication (2.9.3)</li>
<li>rspec-rails (2.14.0)</li>
<li>faker (1.2.0)</li>
<li>ruby 2.0.0p247</li>
<li>OSX 10.9</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Expense</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:images</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:images</span><span class="p">,</span> <span class="ss">:reject_if</span> <span class="o">=&gt;</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span> <span class="kp">attr</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">].</span><span class="n">blank?</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:must_have_image</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">must_have_image</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">[</span><span class="ss">:base</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;Please upload image&quot;</span> <span class="k">if</span> <span class="n">images_empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">images_empty?</span>
</span><span class='line'>    <span class="n">images</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Image</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:expense</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:image</span><span class="p">,</span> <span class="no">ImageUploader</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, create an Image object first as shown <a href="https://github.com/carrierwaveuploader/carrierwave/wiki/How-to%3A-Use-test-fixtures">here</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:image</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">file</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Http</span><span class="o">::</span><span class="no">UploadedFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">:tempfile</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/uploads/file.jpg&quot;</span><span class="p">)),</span>
</span><span class='line'>      <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;image/jpg&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:filename</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/uploads/file.jpg&quot;</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then comes the tricky part of creating an <code>Expense</code> object. Adding this line <code>images_attributes { [Fabricate.attributes_for(:image)] }</code> to the Fabricator did the magic. Here&rsquo;s my final code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:expense</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">title</span> <span class="p">{</span> <span class="ss">Faker</span><span class="p">:</span><span class="ss">:Lorem</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">join</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">description</span> <span class="p">{</span> <span class="ss">Faker</span><span class="p">:</span><span class="ss">:Lorem</span><span class="o">.</span><span class="n">paragraph</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">exp_date</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">images_attributes</span> <span class="p">{</span> <span class="o">[</span><span class="no">Fabricate</span><span class="o">.</span><span class="n">attributes_for</span><span class="p">(</span><span class="ss">:image</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is another way to do this through the controller spec without adding the last line in the Fabricator above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;POST create&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;creates a new expense&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">exp_params</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="o">.</span><span class="n">attributes_for</span><span class="p">(</span><span class="ss">:expense</span><span class="p">)</span>
</span><span class='line'>    <span class="n">img_params</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="o">.</span><span class="n">attributes_for</span><span class="p">(</span><span class="ss">:image</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">expense</span><span class="p">:</span> <span class="n">exp_params</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">images_attributes</span><span class="p">:</span> <span class="o">[</span><span class="n">img_params</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="no">Expense</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating to PostgreSQL]]></title>
    <link href="http://alagram.github.io/blog/2013/11/23/migrating-to-postgresql/"/>
    <updated>2013-11-23T18:53:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/11/23/migrating-to-postgresql</id>
    <content type="html"><![CDATA[<!-- more -->


<p>In my recent project, I had to serialize a Hash into my SQLite database. Then I realised the need to search on that column. Upon doing some research, I found that searching a serialized hash column is very inefficient. There was a better way of going about this: using PostgreSQL Hstore! What&rsquo;s a hacker to do? I quickly started to migrate my SQLite database to PostgreSQL.</p>

<p>Found this <a href="http://railscasts.com/episodes/342-migrating-to-postgresql">Railscast</a> which really helped. But there are a few nasty suprises which I&rsquo;d like to put out here for anyone going through this.</p>

<p>The real problem starts during the process of pulling data from SQLite database with <a href="https://github.com/ricardochimal/taps">Taps</a>. This gem provides a <code>taps</code> command that will help serve the one database and also pull data from it into another. First we have to serve our current SQLite database by passing <code>taps</code> a path to the database and also set a username and password. Then we can pull the data from this database into our Postgres database.</p>

<p>However after running this command I got an error that read something like this:</p>

<pre><code>taps cannot load such file -- sqlite3 (LoadError)
</code></pre>

<p>Huh? After hours of frustration I found that <code>Taps</code> depends on <code>rack</code> version <code>1.0.1</code>.</p>

<h2>Solution</h2>

<p>Added the this to <code>Gemfile</code></p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'rack',’1.0.1’</span></code></pre></td></tr></table></div></figure>


<p>Then on Terminal run this&hellip;</p>

<figure class='code'><figcaption><span>Terminal </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle update rack</span></code></pre></td></tr></table></div></figure>


<p><code>Taps</code> will now successfully pull data from SQLite into Postgres.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading multiple files with carrierwave using a nested form]]></title>
    <link href="http://alagram.github.io/blog/2013/11/04/uploading-multiple-files-with-carrierwave-and-a-nested-form/"/>
    <updated>2013-11-04T17:00:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/11/04/uploading-multiple-files-with-carrierwave-and-a-nested-form</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I recently needed to create a form for uploading multiple files to a given object. I implemented this with <a href="https://github.com/carrierwaveuploader/carrierwave">carrierwave</a> and <a href="https://github.com/tors/jquery-fileupload-rails">jQuery File Upload</a> gems.</p>

<p>Before we start, we need to make sure models and migrations are setup.
For images, we have the following migration:</p>

<pre><code>class CreateImages &lt; ActiveRecord::Migration
  def change
    create_table :images do |t|
    t.string :image
    t.integer :fraud_id

    t.timestamps
  end
end
</code></pre>

<p>I have the following classes:</p>

<pre><code>class Fraud &lt; ActiveRecord::Base
  has_many :images
  accepts_nested_attributes_for :images
end

class Image &lt; ActiveRecord::Base
  belongs_to :fraud
end
</code></pre>

<p>Added gems to Gemfile:</p>

<pre><code>gem 'carrierwave'
gem 'jquery-fileupload-rails'
</code></pre>

<p>Run <code>bundle install</code> to install gems and dependencies.</p>

<p>Then we create a carrierwave uploader with <code>rails generate uploader image</code> and mount the uploader:</p>

<pre><code>class Image &lt; ActiveRecord::Base
  belongs_to :fraud

  mount_uploader :image, ImageUploader
end
</code></pre>

<p>The carrierwave uploader helps by doing all the heavy lifting with regard to uploading the files.</p>

<p>Now we are ready to work on the view, where the form is modified in the following way:</p>

<pre><code>= render 'shared/errors', object: @fraud

= form_for @fraud, html: { class: "form-horizontal", autocomplete: "off", multipart: true } do |f|
  %fieldset
    .control-group
      = f.label :title, class: 'control-label'
      .controls
        = f.text_field :title, class: 'span3'
    .control-group
      = f.label :description, class: 'control-label'
      .controls
        = f.text_area :description, rows: 6, class: 'span6'
    .control-group
      = f.label :fraud_date, class: 'control-label'
      .controls
        = f.text_field :fraud_date, class: 'span3 fraud_date'
    .control-group
      = f.fields_for :images, Image.new do |ff|
        = ff.label :image, "Upload Evidence", class: 'control-label'
        .controls
          = ff.file_field :image, multiple: true, class: 'btn btn-file', id: 'upload-image', name: "fraud[images_attributes][][image]"
  %fieldset.actions.control-group
    .controls
      = f.submit class: 'btn', id: 'submit-data'
</code></pre>

<p>The form setup is a typical form with a few details:
<code>= f.fields_for :images, Image.new do |ff|</code> creates a nested form. <code>accepts_nested_attributes_for</code> allows the creation of a related object along with the main object. There is good documentation of this <a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for">here</a>. So in this example, we are creating an instance of <code>Fraud</code> class while simultaneously creating an instance of an <code>Image</code> class.</p>

<p>Since by default, most browsers do not allow selection of multiple files, we use <code>multiple: true</code> to change this. Also, we have to change the <code>name</code> attribute of our nested form to make it work with carrierwave. The attribute finally looks like this:</p>

<pre><code>name: "fraud[images_attributes][][image]"
</code></pre>

<p>Lastly, we need our images to be uploaded on submit. jQuery File Upload gem by default tries to upload files immediately after its attached, we need to change this.</p>

<p> We grab the id&rsquo;s of the file field and the submit button and use coffeescript to change this default behaviour to fit our needs:</p>

<pre><code>$ -&gt;
  $("#upload-image").fileupload
  add: (e, data) -&gt;
    data.context = $("#submit-data")
    data.submit()
</code></pre>

<p>That&rsquo;s all folks! With this, on submit, Rails knows to create an instance of Fraud and instances of Image. There is a natural association with Fraud and Image.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying to Heroku]]></title>
    <link href="http://alagram.github.io/blog/2013/08/16/deploying-to-heroku/"/>
    <updated>2013-08-16T18:16:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/08/16/deploying-to-heroku</id>
    <content type="html"><![CDATA[<!-- more -->


<p><a href="http://www.heroku.com">Heroku</a> is great for rapid prototyping and testing ideas. All you have to do is <code>git push heroku master</code> right? Wonderful.</p>

<p>However, sometimes deploying can be somewhat daunting, with so many errors messages to deal with. Below is my own Heroku deployment checklist:</p>

<h2>Steps</h2>

<ol>
<li><p>Create an App on Heroku dashboard eg. <code>boboobo</code> and select appropriate region.</p></li>
<li><p>Copy Git URL in this case <code>git@heroku.com:boboobo.git</code> and run <code>git remote add heroku git@heroku.com:boboobo.git</code> in the App directory.</p></li>
<li><p>After making changes in local directory, stage files, commit and then deploy code via <code>git push heroku master</code> or <code>git push heroku mod1:master</code> (when deploying from branch mod1)</p></li>
</ol>


<p>After generating migrations, do the following to avoid any nasty errors</p>

<ol>
<li><p><code>heroku run rake db:migrate</code></p></li>
<li><p><code>heroku run rake db:reset</code> and <code>heroku run rake db:setup</code></p></li>
<li><p><code>heroku restart</code></p></li>
<li><p>Also do <code>heroku logs -t</code> and <code>heroku run console</code> to check server logs and db in console respectively.</p></li>
</ol>


<p>After successfully deploying this app you&rsquo;ll end up with a nice url like <a href="http://boboobo.herokuapp.com">http://boboobo.herokuapp.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Octopress rake new_post problem on Zsh]]></title>
    <link href="http://alagram.github.io/blog/2013/08/15/fix-octopress-rake-new-post-problem-on-zsh/"/>
    <updated>2013-08-15T16:35:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/08/15/fix-octopress-rake-new-post-problem-on-zsh</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Creating a post on <a href="http://octopress.org">Octopress</a> uses a rake command like so:<code>rake new_post["My New Post"]</code></p>

<p>However when you try to create a new post within zsh shell it doesn&rsquo;t work.</p>

<pre><code>$ rake new_post["My New Post"]
zsh: no matches found: new_post[My New Post]
</code></pre>

<p>After following worked for me after doing some googling.</p>

<h2>Solution</h2>

<p>You can fix this problem by simply running <code>rake new_post</code></p>

<pre><code>rake new_post
Enter a title for your post:
</code></pre>

<p>This will then prompt for title of post and then create it. Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Class Act]]></title>
    <link href="http://alagram.github.io/blog/2013/05/24/lets-get-classy/"/>
    <updated>2013-05-24T16:31:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/05/24/lets-get-classy</id>
    <content type="html"><![CDATA[<!-- more -->


<p>We can create an empty class in Ruby by using the following syntax:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The above class can also be written in one line like so:</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Animal</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, lets initialize our class with the <code>initialize</code> method like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our Animal class can now hold vairables, in the form of instance variables and class vairables. Instance variables always start with <code>@</code> while class varaibles start with <code>@@</code>. We have to make sure every Animal we create has a name by giving it <code>@name</code> instance varaible. This way only the Animal class and instances of that class will have access to <code>@name</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can create an instance of our Animal class by calling the <code>new</code> method on <code>Animal</code> class and passing an argument.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="no">Animal</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;bruno&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class variables are attached to the entire class, not just an instance of the class. For instance we can set up a simple BankAccount class and use class variables to track how many instance of the class have been created like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BankAccount</span>
</span><span class='line'>  <span class="vc">@@total_accounts</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vc">@@total_accounts</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">accounts_created</span>
</span><span class='line'>    <span class="vc">@@total_accounts</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">savings</span> <span class="o">=</span> <span class="no">BankAccount</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">current</span> <span class="o">=</span> <span class="no">BankAccount</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">inv</span> <span class="o">=</span> <span class="no">BankAccount</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Number of accounts created is </span><span class="si">#{</span><span class="no">BankAccount</span><span class="o">.</span><span class="n">accounts_created</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'><span class="c1"># =&gt; Number of accounts created is 3.</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now everytime a new instance of BankAcoount is created <code>@@total_accounts</code> is increamented by one. Simple right?</p>

<p>The above illustration also subtly introduced the concept of Class mehtods. These usually start with <code>self</code>. In the context of the class <code>self</code> referes to the current class, hence they can be called directed without creating an instance of a class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">title</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;The title of this book is &#39;Outliers&#39;.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Book</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'><span class="c1"># =&gt; The title of this book is &#39;Outliers&#39;.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instance methods, on the other hand, can only be called by creating an instance of the class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Author</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">info</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;The book has X number of pages and the author is </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">audiobook</span> <span class="o">=</span> <span class="no">Author</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Malcolm Gladwell&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">audiobook</span><span class="o">.</span><span class="n">info</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; The book has X number of pages and the author is Malcolm Gladwell.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>def</code> keyword creates an instance method. Hence the only way <code>info</code> method can be called is by creating an instance of <code>Author</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting familiar with Ruby Arrays and Hash Methods.]]></title>
    <link href="http://alagram.github.io/blog/2013/05/17/getting-familiar-with-ruby-arrays-and-hashes/"/>
    <updated>2013-05-17T14:37:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/05/17/getting-familiar-with-ruby-arrays-and-hashes</id>
    <content type="html"><![CDATA[<!-- more -->


<p>This post is about getting familiar with array and hash methods. Understanding arrays and hashes are very core concepts of Ruby and other frameworks like Rails.</p>

<p>Now lets have some fun with some examples of Array and Hash mehtods.</p>

<p>Given the following array <code>my_array = [1, 2, 3, 5, 7, 9, 11, 12, 13, 15]</code>, we are going to iterate over it and print each element to the screen using the <code>each</code> method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">val</span> <span class="p">}</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="mi">11</span>
</span><span class='line'><span class="mi">12</span>
</span><span class='line'><span class="mi">13</span>
</span><span class='line'><span class="mi">15</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">15</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It prints every element in the array and returns the entire array at the end.</p>

<p>Next, lets use the <code>select</code> method to select all even elements from <code>my_array</code>.
We can do something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or we can do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cute right?</p>

<p>Note: Select returns an array by default, so we didn&rsquo;t have to <code>puts</code> the value like we did with the <code>each</code> method. Also, when using <code>select</code> method, the code within the block or <code>{ }</code> evaluates to true or false. So when its true it&rsquo;s going to be selected, if its false it won&rsquo;t be selected.</p>

<p>Finally, lets use the <code>collect</code> method to square the elements of <code>my_array</code>. We can do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_array</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span> <span class="o">**</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">169</span><span class="p">,</span> <span class="mi">225</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: We can use the <code>map</code> method to achieve the same result.</p>

<p>If we have a hash, how do we get the key and value pairs? We&rsquo;ll use the <code>each</code> method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">club</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;man united&quot;</span><span class="p">,</span> <span class="ss">titles</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">manager</span><span class="p">:</span> <span class="s2">&quot;fergie&quot;</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="s2">&quot;old trafford manchester&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">club</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;key is </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> value is </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Produces</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="nb">name</span> <span class="n">value</span> <span class="n">is</span> <span class="n">man</span> <span class="n">uinted</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="n">title</span> <span class="n">value</span> <span class="n">is</span> <span class="mi">20</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="n">manager</span> <span class="n">value</span> <span class="n">is</span> <span class="n">fergie</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="n">location</span> <span class="n">value</span> <span class="n">is</span> <span class="n">old</span> <span class="n">trafford</span> <span class="n">manchester</span>
</span></code></pre></td></tr></table></div></figure>


<p>What if we want only the keys from a hash? We&rsquo;ll use the <code>each_key</code> method like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">club</span> <span class="o">=</span> <span class="p">{</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;man united&quot;</span><span class="p">,</span> <span class="ss">titles</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">manager</span><span class="p">:</span> <span class="s2">&quot;fergie&quot;</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="s2">&quot;old trafford manchester&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">club</span><span class="o">.</span><span class="n">each_key</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;key is </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Produces</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="nb">name</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="n">title</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="n">manager</span>
</span><span class='line'><span class="n">key</span> <span class="n">is</span> <span class="n">location</span>
</span></code></pre></td></tr></table></div></figure>


<p>Conclusion: Array and Hash methods are very good to know and this post has covered just a few. Learn more about these methods by looking at several Ruby/Rails APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to my Coding Blog]]></title>
    <link href="http://alagram.github.io/blog/2013/05/17/welcome-to-my-coding-blog/"/>
    <updated>2013-05-17T02:54:00+00:00</updated>
    <id>http://alagram.github.io/blog/2013/05/17/welcome-to-my-coding-blog</id>
    <content type="html"><![CDATA[<!-- more -->


<p>I finally set up my blog. Hurray!</p>

<p>About a year ago, I decide to take coding seriously. Along the way I quit my job as a banker, to focus more on business and coding. Started with codecademy, then stopped. Then started learning some PHP and MySQL, and then moved back to codecademy to complete their HTML/CSS and JavaScript tracks. It&rsquo;s been a really fun and sometimes frustrating experience. Tried to build a few things along the way but got stuck.</p>

<p>After all the drifting and some careful research, I settled on Ruby language and building apps with the Rails framework and I&rsquo;m loving it!</p>

<p>This blog will mainly be for sharing my coding adventure with the rest of the world.</p>

<p>So here goes&hellip;</p>
]]></content>
  </entry>
  
</feed>
